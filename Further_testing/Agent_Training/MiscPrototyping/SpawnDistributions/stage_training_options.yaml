# Stage Training Configuration Options
# This file shows all possible options for configuring stage-based training
# in your reinforcement learning environments.

# ===== Stage Training Configuration =====
stage_training:
  enabled: true                 # Whether to use stage-based training
  num_stages: 4                 # Number of training stages (must match number of distributions defined)
  transitions:
    method: "steps"             # Options: "steps", "episodes", "rewards", "custom"
    steps_per_stage: 25000      # Number of timesteps per stage when method is "steps"
    episodes_per_stage: 100     # Number of episodes per stage when method is "episodes"
    reward_thresholds: [0.3, 0.6, 0.8]  # Reward thresholds to advance stages when method is "rewards"
    
  # Distribution options for different stages
  distributions:
    # Stage 1: Near the goal (using 2D Gaussian)
    - type: "gaussian_2d"       # 2D Gaussian distribution with custom center and std
      params: 
        center: [1.0, 1.0]      # Normalized center coordinates [x, y] where (1,1) is bottom-right (goal)
        std: [0.2, 0.2]         # Normalized standard deviations [σx, σy] in grid units
        directional: false      # Whether to use directional gaussian (false = standard x,y directions)
      description: "Near the goal (easy learning)"
      duration_factor: 1.0      # Relative duration compared to other stages
    
    # Stage 2: Mix of corner and center spawning
    - type: "composite"         # Multiple distributions combined
      params:
        distributions: [        # List of distribution components
          {
            "type": "gaussian_2d",
            "weight": 0.7,      # Weight of this component (70%)
            "params": {
              "center": [0.5, 0.5],  # Center of the grid
              "std": [0.3, 0.3]
            }
          },
          {
            "type": "corners",
            "weight": 0.3,      # Weight of this component (30%)
            "params": {
              "corner_size": 2
            }
          }
        ]
      description: "Mix of center and corners (medium challenge)"
      duration_factor: 1.2      # Spend 20% more time in this stage
    
    # Stage 3: Border spawning (challenging navigation)
    - type: "border"            # Spawn along the edges of the grid
      params:
        border_width: 1         # Width of border area (in cells)
      description: "Border spawning (boundary navigation)"
      duration_factor: 0.8      # Spend 20% less time in this stage
    
    # Stage 4: Anywhere in the grid (full mastery)
    - type: "uniform"           # Uniform distribution across all valid locations
      description: "Anywhere in the grid (full mastery)"
      duration_factor: 1.5      # Spend 50% more time in this final stage
    
    # Additional distribution examples:
    
    # Diagonal-aligned Gaussian (top-left to bottom-right)
    - type: "gaussian_2d"
      params:
        center: [0.25, 0.25]    # Near top-left
        std: [0.4, 0.2]         # Elongated along diagonal
        directional: true       # Use diagonal directions for std
        angle: 45               # 45 degrees = top-left to bottom-right diagonal
      description: "Diagonal-aligned distribution"
      enabled: false
    
    # Corner spawning
    - type: "corners"           # Spawn in corners of the grid
      params:
        corner_size: 2          # Size of corner area (in cells)
      description: "Corner spawning (advanced navigation)"
      enabled: false

  # Advanced options
  advanced:
    smooth_transitions: false   # Whether to blend between stages gradually
    transition_steps: 1000      # Steps to blend between stages if smooth_transitions is true
    allow_regression: false     # Whether to allow moving back to earlier stages if performance drops
    performance_metric: "reward_mean"  # Metric to use for stage progression with "rewards" method
    reset_buffer_on_transition: false  # Whether to clear replay buffer between stages
    curriculum_annealing: false # Whether to gradually blend toward uniform distribution 