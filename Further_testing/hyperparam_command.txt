python Agent_Training/optimize_hyperparams.py --n-trials 50 --agents-per-trial 5


train.py
hyperparams.py
generate_evaluations.py
corruption_tool.py
activation_extraction.py

python Neuron_Selection/ObservationTooling/state_filter.py --path Agent_Storage/SpawnTests/biased/biased-v1

git stash
git config pull.rebase true
git pull origin main
git stash pop
git push origin main

# Running category_summaries.py

# Process a specific agent type:
python Agent_Evaluation/category_summaries.py --agent Standard

# Process a specific agent type in a specific base directory:
python Agent_Evaluation/category_summaries.py --base LavaTests --agent Standard

# Process all agent types in a specific base directory:
python Agent_Evaluation/category_summaries.py --base LavaTests

# Process all agent types across all directories:
python Agent_Evaluation/category_summaries.py

# To generate evaluations for all agent versions before running the summary script:
# Run for each agent version:
python Agent_Evaluation/generate_evaluations.py --path Agent_Storage/LavaTests/Standard/Standard-v1
python Agent_Evaluation/generate_evaluations.py --path Agent_Storage/LavaTests/Standard/Standard-v2
# ...and so on for each version

# Then generate the category summary:
python Agent_Evaluation/category_summaries.py --agent Standard




## Activation Patching Workflow Commands

# 1. Generate Clean Inputs
python ObservationTooling/generate_inputs.py --agent_path ../Agent_Storage/SpawnTests/biased/biased-v1 --num_inputs 20 --output_file clean_inputs.json

# 2. Generate Corrupted Inputs
python CorruptionTooling/corrupt_inputs.py --agent_path ../Agent_Storage/SpawnTests/biased/biased-v1 --input_file clean_inputs.json --output_file corrupted_inputs.json --corruption_type noise --strength 0.2

# 3. Extract Clean Activations
python activation_extraction.py --agent_path ../Agent_Storage/SpawnTests/biased/biased-v1 --inputs clean_inputs.json --output clean_activations --readable

# 4. Extract Corrupted Activations
python activation_extraction.py --agent_path ../Agent_Storage/SpawnTests/biased/biased-v1 --inputs corrupted_inputs.json --output corrupted_activations --readable

# 5. Find Different Neurons (Optional, helps identify what to patch)
python find_different_neurons.py --clean ../Agent_Storage/SpawnTests/biased/biased-v1/activation_logging/clean_activations_readable.json --corrupted ../Agent_Storage/SpawnTests/biased/biased-v1/activation_logging/corrupted_activations_readable.json --layer q_net.2 --top_n 10 --threshold 0.1 --generate_patch_spec

# 6. Run Bidirectional Patching
python Neuron_Selection/activation_patching.py --agent_path=Agent_Storage/SpawnTests/biased/biased-v1 --patches_file=Neuron_Selection/ExperimentTooling/Definitions/single_neuron_experiment.json