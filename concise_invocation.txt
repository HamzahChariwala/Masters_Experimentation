CONCISE AGENT DIRECTORY GENERATION - SEQUENTIAL INVOCATION GUIDE
================================================================

Prerequisites: Trained agent.zip file in agent directory, Python environment with dependencies

1. ACTIVATION DATA GENERATION
   Command: python Neuron_Selection/activation_extraction.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: activation_inputs/ and activation_logging/ folders
   Dependencies: agent.zip file

2. LINEAR PROBES TRAINING
   Command: python Neuron_Selection/CircuitTooling/linear_probes.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: activation_probing/ folder with trained logistic regression models
   Dependencies: activation_logging/clean_activations_readable.json and corrupted_activations_readable.json

3. GRADIENT ANALYSIS - WEIGHT GRADIENTS
   Command: python Parameter_Selection/SaliencyTooling/gradients.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: gradient_analysis/weight_gradients.json
   Dependencies: agent.zip and activation_inputs/

4. GRADIENT ANALYSIS - AVERAGE GRADIENTS
   Command: python Parameter_Selection/SaliencyTooling/InitialGradients/average.py --gradients_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6/gradient_analysis/weight_gradients.json"
   Generates: gradient_analysis/average_gradients.json
   Dependencies: weight_gradients.json

5. EVALUATION GENERATION
   Command: python Agent_Evaluation/generate_evaluations.py --path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: evaluation_logs/, evaluation_summary/, final_eval.json
   Dependencies: agent.zip file

6. BEHAVIORAL METRICS (if needed separately)
   Command: python Agent_Evaluation/add_metrics.py "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: Updates evaluation_logs/ and evaluation_summary/ with behavioral metrics
   Dependencies: evaluation_logs/ and Behaviour_Specification/Evaluations/ dijkstra data

7. CATEGORY SUMMARIES (if needed)
   Command: python Agent_Evaluation/category_summaries.py --base "LavaTests/NoDeath/0.100_penalty" --agent "0.100_penalty"
   Generates: category_summary.json with statistics across agent versions
   Dependencies: evaluation_summary/ from multiple agent versions

8. PATCHING SELECTION
   Command: python Neuron_Selection/SelectionTooling/analyze_metrics.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
   Generates: patching_selection/ folder
   Dependencies: activation_inputs/ and activation_logging/

9. ACTIVATION PATCHING EXPERIMENTS
   Command: python Neuron_Selection/activation_patching.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6" --patches_file "Neuron_Selection/ExperimentTooling/Definitions/all_neurons_no_logits.json"
   Generates: patching_results/ folder with raw experiment data
   Dependencies: activation_inputs/, activation_logging/, and patching_selection/

10. COMPREHENSIVE CIRCUIT VERIFICATION
    Command: python Neuron_Selection/SelectionTooling/filter_metrics.py --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
    Generates: patching_results/filtered/, patching_results/analysis/, circuit_verification/descending/descriptions/, circuit_verification/descending/experiments/, circuit_verification/descending/results/, circuit_verification/descending/plots/
    Dependencies: patching_results/ from step 9

11. MONOTONIC COALITION BUILDING AND PLOTTING (INTEGRATED)
    Command: python -m Neuron_Selection.CircuitTooling.MonotonicTooling.run_all_coalition_builders --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6" --candidate_pool_size 50 --max_coalition_size 30 --highest true
    Generates: circuit_verification/monotonic/*/results/, summary.json files, and plots/coalition_verification_*.png for all 7 metrics
    Dependencies: patching_results/filtered/ from step 10

12. MONOTONIC INDIVIDUAL PLOT GENERATION
    Command: python -m Neuron_Selection.CircuitTooling.MonotonicTooling.create_individual_plots --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
    Generates: circuit_verification/monotonic/*/plots/coalition_verification_*.png
    Dependencies: circuit_verification/monotonic/ folders with summary.json files from step 11

13. OPTIMIZATION STATE FILTERING
    Command: python Optimisation_Formulation/StateTooling/optimization_state_filter.py --path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6" --alter "blocked:is:false" "next_cell_is_lava:is:true" "cell_type:eq:floor"
    Generates: optimisation_states/alter/states.json (324 states), optimisation_states/preserve/states.json (2876 states)
    Dependencies: evaluation_logs/ from step 5

14. ADD DESIRED ACTIONS TO ALTER STATES
    Command: python Optimisation_Formulation/StateTooling/add_desired_actions.py --alter_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6/optimisation_states/alter/states.json" --ruleset standard
    Generates: Updates alter/states.json with desired_action field from dijkstra agent behavior
    Dependencies: optimisation_states/alter/states.json from step 13, Behaviour_Specification/Evaluations/ dijkstra data

15. GRADIENT-BASED OPTIMIZATION WITH CUSTOM CONFIG
    Command: python Optimisation_Formulation/GradBasedTooling/enhanced_optimization.py --config_path "path/to/config.json" --agent_path "Agent_Storage/LavaTests/NoDeath/0.100_penalty/0.100_penalty-v6"
    Generates: optimisation_results/optimisation_YYMMDD_HHMMSS/ with detailed and summary logs, optional perturbed model
    Dependencies: optimisation_states/alter/states.json and optimisation_states/preserve/states.json from steps 13-14
    Sample config: Optimisation_Formulation/GradBasedTooling/sample_config.json

ALTERNATIVE COMMANDS:
- Specific metrics only: Add --metrics "kl_divergence" "top_logit_delta_magnitude" to step 11 or 12
- Agent group evaluations: Use bash scripts in Useful_Bash_Scripts/EvalBashScripts/
- Custom preserve criteria: Add --preserve "criteria1" "criteria2" to step 13
- Different dijkstra rulesets: Use --ruleset conservative, dangerous_1, dangerous_2, dangerous_3, dangerous_4, or dangerous_5 in step 14

NOTES:
- Steps 1-10 must be run in order due to dependencies
- Step 11 builds coalitions AND generates plots for all 7 metrics in one command
- Step 12 is optional - only needed if running plots separately or for specific metrics
- Step 10 includes integrated circuit verification workflow for descending analysis
- Step 13 filters states for optimization: ALTER (states to modify) and PRESERVE (states to maintain)
- Step 14 adds reference actions from dijkstra agents; standard ruleset avoids lava, conservative takes longer safer paths
- All paths should be adjusted for actual agent location 